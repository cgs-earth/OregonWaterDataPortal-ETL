# =================================================================
#
# Authors: Colton Loftus <cloftus@lincolninst.edu>
#
# Copyright (c) 2025 Lincoln Institute of Land Policy
#
# Licensed under the MIT License.
#
# =================================================================

from typing import Optional, Sequence
from dagster import get_dagster_logger
from pydantic import BaseModel, Field
import requests

from userCode.schema import ResourceURI
from userCode.util import deterministic_hash


class Ontology(BaseModel, extra="forbid"):
    # The human readable name of the vocabulary term
    name: str
    # The human readable description of the vocabulary term
    definition: str
    # Some sort of associated info about the term such as the provenance description
    description: str
    # The url / uri that a client could go to for more information
    uri: str
    # a unique id that can be used in the sensorthings api to differentiate the term
    id: int = Field(
        alias="@iot.id",
        default_factory=lambda input: deterministic_hash(input["uri"], 5),
    )


def get_ontology(uri: str) -> Ontology:
    """Parse an odm2 vocabulary into a pydantic model"""
    uriAsJson = f"{uri}?format=json"
    get_dagster_logger().info(f"Constructing ontology object from {uriAsJson}")
    resp = requests.get(uriAsJson)
    assert resp.ok, f"Failed to get {uriAsJson}: {resp.text}"
    json = resp.json()
    return Ontology(
        definition=json["definition"],
        description=json["provenance"],
        name=json["name"],
        uri=uri,
    )


# Define the association between user terms
__ontology_definition: dict[Sequence, Optional[ResourceURI]] = {
    (
        "mean_daily_flow",
        "mean daily flow",
        "mean_daily_flow_available",
        "Stream gage"
    ): "streamflow",
    (
        "water_temp_mean",
        "water temperature",
        "water_temp_mean_available",
        "Temperature, water",
    ): "temperatureSensor",
    (
        "groundwater_level",
        "groundwater depth",
        "groundwater",
    ): "groundwaterDepth",
        ("Alkalinity, total"): "n_AlkaneTotal" ,
        # mark
        ("Conductivity"): "electricalConductivity",
        ("Dissolved oxygen (DO)"): "oxygenDissolved",
        ("Dissolved oxygen saturation"): "oxygenDissolvedPercentOfSaturation",
        ("pH"): "pH",
        ("Turbidity", "Turbidity Field"): "turbidity",
        ("Aluminum"): "aluminum" ,
        ("Ammonia"): None,
        ("Arsenic"): "arsenic",
        ("Biochemical oxygen demand, non-standard conditions"): None,
        ("Cadmium"): "cadmium" ,
        ("Calcium"): "calciumTotal",
        ("Chemical oxygen demand"): None,
        ("Chlorophyll a"): "chlorophyll_a",
        ("Chromium"): "chromium",
        ("Copper"): "copper",
        ("Escherichia coli"): "e_coli" ,
        ("Fecal Coliform"): "coliformFecal",
        # NOTE: this could map to multiple, confusing?
        ("Hardness, Ca, Mg"): "hardnessCalcium",
        ("Iron"): "Iron",
        ("Lead"): "lead",
        ("Magnesium"): "magnesium",
        ("Nickel"): "nickel",
        ("Nitrate + Nitrite"): "nitrogenNitrite_NO2_Nitrate_NO3",
        ("Organic carbon"): "carbonOrganicExtractable",
        ("Orthophosphate"): "phosphorusOrthophosphate",
        ("Pheophytin a"): "pheophytin",
        ("Potassium"): "potassium",
        ("Selenium"): "seleniumTotal",
        ("Silver"): "silver",
        ("Sodium"): "sodium",
        ("Total Kjeldahl nitrogen"): "nitrogenTotalKjeldahl",
        ("Total Phosphorus, mixed forms"): "phosphorusTotal",
        ("Total solids"): "solidsTotal",
        ("Total suspended solids"): "solidsTotalSuspended" ,
        ("Zinc"): "zinc",
        ("Specific conductance"): "specificConductance",
        ("Barium"): "barium",
        ("Beryllium"): "beryllium" ,
        ("Boron"): "boronTotal" ,
        ("Bromide"): "bromide" ,
        ("Chloride"): "chloride",
        ("Cobalt"): "cobalt" ,
        ("Lanthanum"): "lanthanum" ,
        ("Lithium"): "lithiumTotal" ,
        ("Manganese"): "manganese",
        ("Molybdenum"): "molybdenumTotal",
        ("Perchlorate"): None ,
        ("Silica"): "silica",
        ("Sulfate"): "sulfate" ,
        ("Total dissolved solids"): "solidsTotalDissolved" ,
        ("Vanadium"): "vanadiumTotal",
        ("Water level (probe)"): "waterLevel",
        ("Count"): None,
        ("Density"): "density",
        ("Depth, bottom"): "depth",
        ("Depth, from ground surface to well water level"): "groundwaterDepth" ,
        ("Chlorthal-dimethyl"): None,
        ("Dacthal Acid Metabolites"): None,
        ("Depth, data-logger (ported)"): "depth",
        ("Atrazine"): None,
        ("Azinphos-methyl"): None ,
        ("Azinphos-methyl oxygen analog"): None,
        ("Chlorpyrifos"): None,
        ("Chlorpyrifos O.A."): None,
        ("Diazinon"): None,
        ("Dimethoate"): None,
        ("Ethoprop"): None ,
        ("Fenvalerate + Esfenvalerate"): None,
        ("Malaoxon"): None,
        ("Malathion"): "malathion",
        ("Methyl parathion"): None,
        ("Phosmet"): None,
        ("Phosmetoxon"): None ,
        ("Pyriproxyfen"): None,
        ("Simazine"): None,
        ("Thallium"): "thallium",
        ("Total Coliform"): "coliformTotal",
        ("Antimony"): "antimony" ,
        ("Halogenated organics"): None ,
        ("True color"): None,
        ("Dicamba"): None,
        ("Enterococcus"): "enterococci" ,
        # NOTE" unsure on this if gauge or something else
        ("Pressure"): "pressureGauge" ,
        ("Salinity"): "salinity" ,
        ("Nitrate"): "nitrogenTotalNitrite" ,
        ("Nitrite"): "nitrogenTotalNitrite",
        ("Disulfoton"): "disulfoton" ,
        ("Phorate"): "phorate",
        ("Flow"): "wellFlowRate",
        ("Carbonaceous biochemical oxygen demand, non-standard conditions"): "BOD2Carbonaceous" ,
        (".alpha.-Endosulfan"): "endosulfan_I_Alpha",
        (".alpha.-Hexachlorocyclohexane"): None,
        (".beta.-Endosulfan"): "endosulfan_II_Beta",
        (".beta.-Hexachlorocyclohexane"): None,
        (".delta.-Hexachlorocyclohexane"): None,
        ("2,6-Dichlorobenzamide"): "2_6_Dichlorophenol",
        ("2-Chloro-4-isopropylamino-6-amino-s-triazine"): None,
        ("Acetamiprid"): ,
        ("Acetochlor"): ,
        ("Alachlor"): ,
        ("Aldrin"): ,
        ("Ametryn"): ,
        ("Bifenthrin"): ,
        ("Bromacil"): ,
        ("Butachlor"): ,
        ("Butylate"): ,
        ("Carbaryl"): ,
        ("Carbofuran"): ,
        ("Chlorobenzilate"): ,
        ("Chloroneb"): ,
        ("Chlorothalonil"): ,
        ("Chlorpropham"): ,
        ("cis-Chlordane"): ,
        ("Cyanazine"): ,
        ("Cycloate"): ,
        ("Deisopropylatrazine"): ,
        ("Dichlobenil"): ,
        ("Dichlorvos"): ,
        ("Dieldrin"): ,
        ("Dimethenamid"): ,
        ("Diphenamid"): ,
        ("Diuron"): ,
        ("Endosulfan sulfate"): ,
        ("Endrin"): ,
        ("Endrin aldehyde"): ,
        ("Etridiazole"): ,
        ("Fenamiphos"): ,
        ("Fenarimol"): ,
        ("Fluometuron"): ,
        ("Fluridone"): ,
        ("Heptachlor"): ,
        ("Heptachlor epoxide"): ,
        ("Hexazinone"): ,
        ("Imazapyr"): ,
        ("Imidacloprid"): ,
        ("Lindane"): ,
        ("Linuron"): ,
        ("Methiocarb"): ,
        ("Methomyl"): ,
        ("Methoxychlor"): ,
        ("Methyl paraoxon"): ,
        ("Metolachlor"): ,
        ("Metribuzin"): ,
        ("Metsulfuron-methyl"): ,
        ("Mevinphos"): ,
        ("Mexacarbate"): ,
        ("Mirex"): ,
        ("Molinate"): ,
        ("N,N-Diethyl-m-toluamide"): ,
        ("N-2-Ethylhexylbicycloheptenedicarboximide"): ,
        ("Napropamide"): ,
        ("Neburon"): ,
        ("Norflurazon"): ,
        ("Oxamyl"): ,
        ("Oxyfluorfen"): ,
        ("p,p'-DDD"): ,
        ("p,p'-DDE"): ,
        ("p,p'-DDT"): ,
        ("Parathion"): ,
        ("Pebulate"): ,
        ("Pendimethalin"): ,
        ("Permethrin"): ,
        ("Prometon"): ,
        ("Prometryn"): ,
        ("Pronamide"): ,
        ("Propachlor"): ,
        ("Propazine"): ,
        ("Propiconazole"): ,
        ("Propoxur"): ,
        ("Pyraclostrobin"): ,
        ("S-Ethyl dipropylthiocarbamate"): ,
        ("Siduron"): ,
        ("Simetryn"): ,
        ("Sulfometuron methyl"): ,
        ("Tebuthiuron"): ,
        ("Terbacil"): ,
        ("Terbufos"): ,
        ("Terbuthylazine"): ,
        ("Terbutryn"): ,
        ("Tetrachlorvinphos"): ,
        ("trans-Chlordane"): ,
        ("trans-Nonachlor"): ,
        ("Triadimefon"): ,
        ("Tricyclazole"): ,
        ("Trifluralin"): ,
        ("Vernolate"): ,
        ("Chlorophyll a (probe relative fluorescence)"): ,
        ("Phycocyanin (probe relative fluorescence)"): ,
        ("Chlorophyll a (probe)"): ,
        ("Phycocyanin"): ,
        ("Depth"): ,
        ("Depth, Secchi disk depth"): ,
        ("Silicon"): ,
        ("2,4,5-T"): ,
        ("2,4-D"): ,
        ("2,4-DB"): ,
        ("3,5-Dichlorobenzoic acid"): ,
        ("Acephate"): ,
        ("Acifluorfen"): ,
        ("Aminocarb"): ,
        ("Azoxystrobin"): ,
        ("Carboxin"): ,
        ("Chlorthal monoacid and diacid degradates"): ,
        ("Dichlorprop"): ,
        ("Dinoseb"): ,
        ("MCPA"): ,
        ("Mecoprop-p (mcpp-p)"): ,
        ("Pentachlorophenol"): ,
        ("Picloram"): ,
        ("Pyraflufen-ethyl"): ,
        ("Silvex"): ,
        ("Triclopyr"): ,
        ("Trifloxystrobin"): ,
        ("Tris(1,3-dichloro-2-propyl)phosphate"): ,
        ("Tris(2-chloroethyl) phosphate"): ,
        ("Nitrogen"): ,
        ("Nitrogen, mixed forms (NH3), (NH4), organic, (NO2) and (NO3)"): ,
        ("(RS)-AMPA (Aminomethyl phosphonic acid)"): ,
        ("Coumaphos"): ,
        ("Demeton-S"): ,
        ("Fensulfothion"): ,
        ("Fenthion"): ,
        ("Glyphosate"): ,
        ("O-Ethyl O-(p-nitrophenyl) phenylphosphonothioate"): ,
        ("Prothiofos"): ,
        ("Ronnel"): ,
        ("Sulprofos"): ,
        ("Trichloronate"): 

}


def construct_ontology_mapping() -> dict[str, Ontology]:
    """Construct a dictionary from the association list in which we defined in the ontology mapping"""
    equiv_dict = dict()
    for keys, value in __ontology_definition.items():
        for key in keys:
            assert key not in equiv_dict, (
                f"Tried to add duplicate key {key} when it already exists in {equiv_dict}"
            )
            equiv_dict[key] = get_ontology(
                f"http://vocabulary.odm2.org/api/v1/variablename/{value}/"
            )

    return equiv_dict


ONTOLOGY_MAPPING = construct_ontology_mapping()
