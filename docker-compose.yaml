services:
  owdp-frost:
    container_name: owdp-frost
    build:
      context: ./docker/frost
    environment:
      - serviceRootUrl=${OWDP_URL}/FROST-Server
      - persistence_db_url=jdbc:postgresql://owdp-database:5432/sensorthings
      - persistence_db_username=sensorthings
      - persistence_db_password=ChangeMe
      - persistence_autoUpdateDatabase=true
    ports:
      - 1883:1883
      - 8080:8080
    depends_on:
      - owdp-database

  owdp-database:
    container_name: owdp-database
    build:
      context: ./docker/database
    environment:
      - POSTGRES_DB=sensorthings
      - POSTGRES_USER=sensorthings
      - POSTGRES_PASSWORD=ChangeMe
    volumes:
      - postgis_volume:/var/lib/postgresql/data

  postgres-exporter:
    container_name: postgres-exporter
    image: prometheuscommunity/postgres-exporter:latest
    restart: unless-stopped
    environment: 
      - DATA_SOURCE_NAME=postgresql://sensorthings:ChangeMe@owdp-database:5432/sensorthings?sslmode=disable
    ports:
      - 9187:9187

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)"


  owdp-pygeoapi:
    container_name: owdp-pygeoapi
    build:
      context: docker/pygeoapi
    depends_on:
      - owdp-frost
    restart: unless-stopped
    environment:
      - API_URL=${OWDP_URL}/oapi
      - API_BACKEND_URL=http://owdp-frost:8080/FROST-Server/v1.1
      - SCRIPT_NAME=/oapi

  owdp-ui:
    image: internetofwater/hub2box-ui:owdp-limited
    container_name: owdp-ui
    depends_on:
      - owdp-pygeoapi
    environment:
      - WIS2BOX_URL=${OWDP_URL}
      - WIS2BOX_API_URL=${OWDP_URL}/oapi
      - serviceRootUrl=${OWDP_URL}/FROST-Server

  web-proxy:
    container_name: web-proxy
    build:
      context: docker/nginx
    restart: always
    depends_on:
      - owdp-ui
    ports:
      - 8999:80

  owdp-dagster:
    container_name: owdp-dagster
    build:
      # have to use . as context so we can get requirements.txt in the context but
      # also have it at the root for local dev
      context: .
      dockerfile: ./docker/dagster/Dockerfile
    ports:
      - 3000:3000
    restart: always
    environment:
      - SLACK_BOT_TOKEN
      - API_BACKEND_URL=http://owdp-frost:8080/FROST-Server/v1.1
    deploy:
      resources:
        limits:
          cpus: "7"
          memory: 4GB

    # only spin up the docker container for dagster if we are in production
    # otherwise we want to use uv with hot reloading using dagster dev
    profiles: [production]

  owdp-container-monitor:
    build:
      context: ./docker/container_monitor
    container_name: owdp-container-monitor
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - SLACK_BOT_TOKEN
      # NOTE, no # needed here for the channel name
      - SLACK_CHANNEL_NAME=cgs-iow-bots
      - SLACK_BOT_NAME=Oregon Container Monitoring Bot
      - SLACK_BOT_AVATAR=https://cida.usgs.gov/wsgi/ngwmn_ui/static/img/provider_logos/owrd_logo.50b3448a.png
      - LOG_WATCH_CONTAINER_NAME=owdp-frost
      - LOG_WATCH_COMMA_SEPARATED_PATTERNS=Slow Query
    # Don't monitor containers in the dev env or CI/CD
    profiles: [production]
    restart: always

  owdp-prometheus:
    image: prom/prometheus
    container_name: owdp-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prom_data:/prometheus
  owdp-grafana:
    image: grafana/grafana
    container_name: owdp-grafana
    ports:
      - 4000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources

volumes:
  postgis_volume:
  prom_data:
