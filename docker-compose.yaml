services:
  owdp-frost:
    container_name: owdp-frost
    build:
      context: ./docker/frost
    environment:
      - serviceRootUrl=${OWDP_URL}/FROST-Server
      - persistence_db_url=jdbc:postgresql://owdp-database:5432/sensorthings
      - persistence_db_username=sensorthings
      - persistence_db_password=ChangeMe
      - persistence_autoUpdateDatabase=true
    ports:
      - 1883:1883
      - 8080:8080
    depends_on:
      - owdp-database

  owdp-database:
    container_name: owdp-database
    build:
      context: ./docker/database
    environment:
      - POSTGRES_DB=sensorthings
      - POSTGRES_USER=sensorthings
      - POSTGRES_PASSWORD=ChangeMe
    volumes:
      - postgis_volume:/var/lib/postgresql/data

  owdp-pygeoapi:
    container_name: owdp-pygeoapi
    build:
      context: docker/pygeoapi
    depends_on:
      - owdp-frost
    environment:
      - API_URL=${OWDP_URL}/oapi
      - API_BACKEND_URL=http://owdp-frost:8080/FROST-Server/v1.1
      - SCRIPT_NAME=/oapi
    restart: always
    volumes:
      - ./docker/pygeoapi/templates/jsonld/things/collections/items/item.jsonld:/pygeoapi/pygeoapi/templates/jsonld/things/collections/items/item.jsonld

  owdp-ui:
    image: internetofwater/hub2box-ui:owdp-limited
    container_name: owdp-ui
    depends_on:
      - owdp-pygeoapi
    environment:
      - WIS2BOX_URL=${OWDP_URL}
      - WIS2BOX_API_URL=${OWDP_URL}/oapi
      - serviceRootUrl=${OWDP_URL}/FROST-Server

  web-proxy:
    container_name: web-proxy
    build:
      context: docker/nginx
    restart: always
    depends_on:
      - owdp-ui
    ports:
      - 8999:80

  owdp-dagster:
    container_name: owdp-dagster
    build:
      # have to use . as context so we can get requirements.txt in the context but
      # also have it at the root for local dev
      context: .
      dockerfile: ./docker/dagster/Dockerfile
    ports:
      - 3000:3000
    restart: always
    environment:
      - SLACK_BOT_TOKEN
      - API_BACKEND_URL=http://owdp-frost:8080/FROST-Server/v1.1
    deploy:
      resources:
        limits:
          cpus: "7"
          memory: 4GB

    # only spin up the docker container for dagster if we are in production
    # otherwise we want to use uv with hot reloading using dagster dev
    profiles: [production]

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - 5050:80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
      - ./docker/pgadmin/setup.sh:/docker-entrypoint-initdb.d/setup.sh
    depends_on:
      - owdp-database
    profiles:
      - debug

volumes:
  postgis_volume:
  pgadmin_data:
